plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "org.openapi.generator" version "4.2.3"
}

version "0.1"
group "example"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor "org.projectlombok:lombok:1.18.12"
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "example.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

def projNameNoDashes = "${project.name.replace('-', '')}"
def artifactId = "${project.name}-client"
def artifactGroupId = "${project.group}"
def artifactVersion = "${project.version}"

openApiGenerate {
    generatorName = "java"
    inputSpec = "$buildDir/classes/java/main/META-INF/swagger/the-title-0.0.yml".toString()
    outputDir = "$buildDir/generated/open-api-client".toString()
    id = artifactId.toString()
    groupId = artifactGroupId.toString()
    version = artifactVersion.toString()
    apiPackage = "${artifactGroupId}.client.${projNameNoDashes}.api".toString()
    invokerPackage = "${artifactGroupId}.client.${projNameNoDashes}.invoker".toString()
    modelPackage = "${artifactGroupId}.client.${projNameNoDashes}.model".toString()
    validateSpec = false
    skipValidateSpec = true
    configOptions = [
        dateLibrary: "java8"
    ]
}